     1                                  %define	STACK_SIZE 6
     2                                  %define NUM_REPAIR 48
     3                                  %define CHAR_REPAIR 55
     4                                  %define	HEX_BASE 16
     5                                  %define OCTAL_BASE 8
     6                                  
     7                                  section	.rodata
     8 00000000 4572726F723A205374-     ERROR_OVERFLOW		DB	"Error: Stack Overflow. ",10,0
     9 00000009 61636B204F76657266-
    10 00000012 6C6F772E200A00     
    11 00000019 4572726F723A204E6F-     ERROR_ARGUMENTS		DB	"Error: Not Enough Arguments on Stack. ",10,0
    12 00000022 7420456E6F75676820-
    13 0000002B 417267756D656E7473-
    14 00000034 206F6E20537461636B-
    15 0000003D 2E200A00           
    16 00000041 63616C633A00            CALC 			DB	"calc:", 0	; Format string
    17 00000047 255800                  PRINT_C 		DB	"%X",0
    18 0000004A 256F00                  PRINT_O 		DB	"%o",0
    19 0000004D 256400                  PRINT_D			DB	"%d",0
    20 00000050 0A00                    NEWLINE 		DB	"",10,0
    21                                  
    22                                  section .data
    23 00000000 00000000                	an:   DD 0	; counts the total number of calculations used
    24                                  
    25                                  section .bss
    26 00000000 <res 00000050>          INPUT		RESB 	80	;input from user
    27 00000050 <res 00000018>          STACK		RESB 	24	;the stack holding all elements
    28 00000068 <res 00000004>          INDEX		RESB 	4	;num of elements
    29 0000006C <res 00000004>          INPUTMODE	RESB 	4	;0 = hex, 1=octal
    30 00000070 <res 00000050>          OPERAND1	RESB	80	;holding all numbers in one array
    31 000000C0 <res 00000050>          OPERAND2	RESB	80	;holding all numbers in one array
    32 00000110 <res 00000052>          ANSWER		RESB	82	;answer after calc
    33 00000162 <res 00000004>          OPI1		RESB	4	
    34 00000166 <res 00000004>          OPI2		RESB	4
    35 0000016A <res 00000004>          ANI		RESB 	4
    36 0000016E <res 00000020>          EXPONENT	RESB	32	;saving the number that needs to be calc
    37 0000018E <res 00000028>          EXP_ANSWER	RESB    40	;answer of exponent to be build as linked list
    38                                  
    39                                  
    40                                  section .text
    41                                  	align 16
    42                                  	global my_calc
    43                                  	extern printf
    44                                  	extern gets
    45                                  	extern malloc
    46                                  	extern free
    47                                  
    48                                  my_calc:
    49 00000000 55                      	push	ebp
    50 00000001 89E5                    	mov	ebp, esp	
    51 00000003 60                      	pusha			
    52                                  	
    53 00000004 C605[68000000]01        	mov	byte [INDEX],1
    54 0000000B C605[6C000000]00        	mov	byte [INPUTMODE],0
    55                                  
    56                                  calc:
    57 00000012 B800000000              	mov	eax,0
    58 00000017 BB00000000              	mov	ebx,0
    59                                  
    60 0000001C 68[41000000]            	push	CALC
    61 00000021 E8(00000000)            	call	printf
    62 00000026 83C404                  	add	esp,4
    63                                  	
    64 00000029 68[00000000]            	push	dword INPUT
    65 0000002E E8(00000000)            	call	gets
    66 00000033 83C404                  	add	esp,4
    67                                  	
    68 00000036 8A1D[00000000]          	mov	bl,[INPUT]	;checking the first char
    69 0000003C FF05[00000000]          	inc 	dword [an]
    70                                  	
    71 00000042 80FB71                  	cmp 	bl,'q'		;quit
    72 00000045 7441                    	je	quit
    73                                  	
    74 00000047 80FB70                  	cmp	bl,'p'		;pop and print
    75 0000004A 0F8444020000            	je	print
    76                                  
    77 00000050 80FB6F                  	cmp	bl,'o'		;octal
    78 00000053 0F846D030000            	je	octal
    79                                  
    80 00000059 80FB68                  	cmp	bl,'h'		;hexadecimal
    81 0000005C 0F8470030000            	je	hexadecimal
    82                                  
    83 00000062 80FB64                  	cmp	bl,'d'		;duplicate
    84 00000065 0F84F1010000            	je	duplicate
    85                                  
    86 0000006B 80FB2B                  	cmp	bl,'+'		;addition
    87 0000006E 0F848B000000            	je	addition
    88                                  	
    89 00000074 80FB78                  	cmp	bl,'x'		;xor
    90 00000077 0F846D030000            	je	xor
    91                                  	
    92 0000007D 80FB5E                  	cmp	bl,'^'		;exponent
    93 00000080 0F849E040000            	je	exponent
    94                                  
    95 00000086 EB33                    	jmp	push_number	;number from user
    96                                  
    97                                  
    98                                  quit:	
    99 00000088 E9A9050000              	jmp	free_stack
   100                                  	
   101                                  continue:
   102 0000008D 61                      	popa				
   103 0000008E 89EC                    	mov	esp, ebp
   104 00000090 5D                      	pop	ebp
   105 00000091 A1[00000000]            	mov eax,[an]
   106 00000096 C3                      	ret
   107                                  
   108                                  error_overflow:		;message error overflow
   109 00000097 68[00000000]            		push	ERROR_OVERFLOW
   110 0000009C E8(00000000)            		call	printf
   111 000000A1 83C404                  		add	esp,4
   112 000000A4 E969FFFFFF              		jmp	calc	
   113                                  
   114                                  error_argu:		;message error arguments
   115 000000A9 68[19000000]            		push	ERROR_ARGUMENTS
   116 000000AE E8(00000000)            		call	printf
   117 000000B3 83C404                  		add	esp,4
   118 000000B6 E957FFFFFF              		jmp	calc	
   119                                  
   120                                  push_number:
   121 000000BB FF0D[00000000]          	dec 	dword [an]		;not yet to be counted
   122 000000C1 803D[68000000]06        	cmp	byte [INDEX],STACK_SIZE ;max num of numbers should be STACK_SIZE-1
   123 000000C8 7DCD                    	jge	error_overflow
   124 000000CA BF00000000              	mov	edi,0
   125 000000CF BE00000000              	mov	esi,0
   126 000000D4 8B35[68000000]          	mov	esi,[INDEX]
   127 000000DA 6BF604                  	imul	esi,4
   128 000000DD BF[50000000]            	mov	edi,STACK
   129 000000E2 01F7                    	add	edi,esi			;getting the index to place new number link in stack
   130 000000E4 6A00                    	push	dword 0
   131 000000E6 68[00000000]            	push	INPUT
   132 000000EB 57                      	push	edi
   133 000000EC E822020000              	call	make_list		;make list for stack
   134 000000F1 83C40C                  	add	esp,12
   135 000000F4 FE05[68000000]          	inc	byte [INDEX]	
   136 000000FA E913FFFFFF              	jmp	calc
   137                                  
   138                                  
   139                                  addition:
   140 000000FF C705[62010000]0000-     	  mov	dword [OPI1],0
   141 00000107 0000               
   142 00000109 C705[66010000]0000-     	  mov	dword [OPI2],0
   143 00000111 0000               
   144 00000113 803D[68000000]02                  cmp	byte [INDEX],2
   145 0000011A 7E8D                    	  jle	error_argu
   146 0000011C 8B35[68000000]          	  mov	esi,[INDEX]
   147 00000122 4E                      	  dec	esi
   148 00000123 8B3CB5[50000000]        	  mov	edi,[STACK+4*esi]	;the last argument in stack
   149 0000012A B800000000              	  mov	eax,0
   150                                  
   151                                  op1_loop:			;gathering all numbers op operand 1 in array
   152 0000012F BA00000000              	  mov   edx,0			
   153 00000134 8A17                    	  mov	dl,[edi]		;number to be calculate
   154 00000136 8890[70000000]          	  mov	[OPERAND1+eax],dl	
   155 0000013C 47                      	  inc	edi
   156 0000013D 40                      	  inc	eax
   157 0000013E 8B3F                    	  mov	edi,[edi]
   158 00000140 80FA47                  	  cmp	dl,'G'			;end of linked list - end with 'G'
   159 00000143 75EA                    	  jne	op1_loop
   160                                  	  
   161 00000145 48                      	  dec	eax			;setting eax to size of elements ex. eax=8 -> 2 numbers  
   162 00000146 A3[62010000]            	  mov	[OPI1],eax
   163 0000014B 4E                      	  dec	esi
   164 0000014C 8B3CB5[50000000]        	  mov	edi,[STACK+4*esi]
   165 00000153 B800000000              	  mov	eax,0
   166 00000158 FE0D[68000000]          	  dec	byte [INDEX]
   167                                  
   168                                  
   169                                  op2_loop:			;gathering all numbers op operand 2 in array
   170 0000015E BA00000000              	  mov   edx,0
   171 00000163 8A17                    	  mov	dl,[edi]  
   172 00000165 8890[C0000000]          	  mov	[OPERAND2+eax],dl
   173 0000016B 47                      	  inc	edi
   174 0000016C 40                      	  inc	eax
   175 0000016D 8B3F                    	  mov	edi,[edi]
   176 0000016F 80FA47                  	  cmp	dl,'G'
   177 00000172 75EA                    	  jne	op2_loop   
   178                                  	  
   179 00000174 48                      	  dec	eax
   180 00000175 A3[66010000]            	  mov	[OPI2],eax
   181 0000017A FE0D[68000000]          	  dec	byte [INDEX]
   182                                  	  
   183 00000180 A3[6A010000]            	  mov	[ANI],eax	;setting the answer size by the bigger operands (align)
   184 00000185 3B05[62010000]          	  cmp	eax,[OPI1]
   185 0000018B 7D0A                    	  jge	build_ans
   186 0000018D A1[62010000]            	  mov	eax,[OPI1]
   187 00000192 A3[6A010000]            	  mov	[ANI],eax
   188                                  
   189                                  
   190                                  build_ans:			;building answer
   191 00000197 FF05[6A010000]          	  inc	dword [ANI]
   192 0000019D 8B35[6A010000]          	  mov	esi,[ANI]
   193 000001A3 C686[10010000]47        	  mov	byte [ANSWER+esi],'G'
   194 000001AA B900000000              	  mov	ecx,0
   195                                  	  
   196                                  
   197                                  add_loop:			;starting adding loop
   198 000001AF B800000000              	    mov	 eax,0 
   199 000001B4 BB00000000              	    mov	 ebx,0 
   200 000001B9 FF0D[6A010000]          	    dec  dword [ANI]
   201 000001BF FF0D[62010000]          	    dec	 dword [OPI1]
   202 000001C5 FF0D[66010000]          	    dec	 dword [OPI2]
   203 000001CB 833D[6A010000]00        	    cmp  dword [ANI],0
   204 000001D2 7C53                    	    jl	 add_out
   205                                  	    
   206 000001D4 8B35[62010000]          	    mov	 esi,[OPI1]
   207 000001DA 83FE00                  	    cmp	 esi,0
   208 000001DD 7C06                    	    jl	 opi1_empty
   209                                  
   210 000001DF 8A86[70000000]          	    mov  al,[OPERAND1+esi]
   211                                  
   212                                  
   213                                  opi1_empty:
   214 000001E5 8B35[66010000]          	    mov	 esi,[OPI2]
   215 000001EB 83FE00                  	    cmp	 esi,0
   216 000001EE 7C06                    	    jl	 opi2_empty
   217                                  
   218 000001F0 8A9E[C0000000]          	    mov  bl,[OPERAND2+esi]
   219                                  
   220                                  opi2_empty:			
   221 000001F6 00D8                    	    add  al,bl
   222 000001F8 00C8                    	    add  al,cl			;cl represents the carry from the previous iteration
   223                                  	    
   224 000001FA 803D[6C000000]01        	    cmp	 byte [INPUTMODE],1
   225 00000201 740A                    	    je	 check_octal_carry
   226                                  	    
   227 00000203 3C10                    	    cmp	 al,16     
   228 00000205 7C10                    	    jl	 nocarry
   229                                  	    
   230 00000207 B101                    	    mov	 cl,1
   231 00000209 2C10                    	    sub	 al,16     
   232 0000020B EB0C                    	    jmp	 after_carry
   233                                  
   234                                  check_octal_carry:			;setting carry for octal
   235 0000020D 3C08                    	    cmp	 al,8     
   236 0000020F 7C06                    	    jl	 nocarry
   237 00000211 B101                    	    mov	 cl,1
   238 00000213 2C08                    	    sub	 al,8     
   239 00000215 EB02                    	    jmp	 after_carry
   240                                  
   241                                  nocarry:    
   242 00000217 B100                    	    mov	 cl,0
   243                                  
   244                                  after_carry:
   245 00000219 8B35[6A010000]          	    mov	esi,[ANI]
   246 0000021F 8886[10010000]          	    mov	[ANSWER+esi],al
   247 00000225 EB88                    	    jmp add_loop
   248                                      
   249                                  add_out:			;taking answer and adding to stack
   250 00000227 BF00000000              	mov	edi,0
   251 0000022C BE00000000              	mov	esi,0
   252 00000231 8B35[68000000]          	mov	esi,[INDEX]
   253 00000237 6BF604                  	imul	esi,4
   254 0000023A BF[50000000]                    mov	edi,STACK
   255 0000023F 01F7                            add	edi,esi
   256 00000241 6A01                    	push	dword 1    
   257 00000243 68[10010000]            	push	ANSWER
   258 00000248 57                      	push	edi
   259 00000249 E8C5000000              	call	make_list
   260 0000024E 83C40C                  	add 	esp,12
   261 00000251 FE05[68000000]          	inc	byte [INDEX]
   262                                  
   263                                  	
   264 00000257 E9B6FDFFFF              	jmp	calc
   265                                  
   266                                  duplicate:			;duplicating last element
   267 0000025C BE00000000              	  mov	esi,0
   268 00000261 8B35[68000000]          	  mov	esi,[INDEX]
   269                                  
   270 00000267 83FE06                  	  cmp	esi,STACK_SIZE
   271 0000026A 0F8D27FEFFFF            	  jge	error_overflow
   272                                  
   273 00000270 83FE01                  	  cmp	esi,1
   274 00000273 0F8E30FEFFFF            	  jle	error_argu
   275                                  
   276 00000279 4E                      	  dec	esi
   277 0000027A 8B3CB5[50000000]        	  mov	edi,[STACK+4*esi]
   278                                  
   279 00000281 46                      	  inc	esi
   280 00000282 893CB5[50000000]        	  mov	[STACK+4*esi],edi
   281 00000289 FE05[68000000]          	  inc	byte [INDEX]
   282                                  
   283 0000028F E97EFDFFFF              	  jmp	calc
   284                                  
   285                                  
   286                                  print:				;printing function, by octal/hex and removing leading zeros
   287 00000294 803D[68000000]01        	cmp	byte [INDEX],1
   288 0000029B 0F8E08FEFFFF            	jle	error_argu
   289 000002A1 B800000000              	mov	eax, 0
   290                                  	
   291 000002A6 BE00000000              	mov	esi,0
   292 000002AB BF00000000              	mov	edi,0
   293                                  	
   294 000002B0 8B35[68000000]          	mov	esi,[INDEX]
   295 000002B6 4E                      	dec	esi
   296 000002B7 8B3CB5[50000000]        	mov	edi,[STACK+4*esi]
   297                                  
   298                                  print_loop:
   299 000002BE BA00000000              	mov	edx,0
   300 000002C3 8A17                    	mov	dl,[edi]
   301                                  	
   302 000002C5 80FA47                  	cmp	byte dl,'G'
   303 000002C8 7431                    	je	print_out
   304                                  
   305 000002CA 83F800                  	cmp 	eax, 0
   306 000002CD 7508                    	jne 	non_zero_print
   307                                   
   308 000002CF 83C001                  	add     eax, 1
   309 000002D2 83FA00                  	cmp	edx, 0		;first node is 0(zero) so don't need to print
   310 000002D5 741F                    	je	next_print
   311                                  
   312                                  non_zero_print:
   313 000002D7 803D[6C000000]00        	cmp	byte [INPUTMODE],0
   314 000002DE 7408                    	je	hex
   315                                  
   316 000002E0 52                      	push	edx
   317 000002E1 68[4A000000]            	push	PRINT_O
   318 000002E6 EB06                    	jmp	Apush
   319                                  
   320                                  hex:
   321 000002E8 52                      	push	edx
   322 000002E9 68[47000000]            	push	PRINT_C
   323                                    
   324                                  Apush:
   325 000002EE E8(00000000)            	call	printf
   326 000002F3 83C408                  	add 	esp,8
   327                                    
   328                                  next_print:
   329 000002F6 47                      	inc	edi
   330 000002F7 8B3F                    	mov	edi,[edi]
   331 000002F9 EBC3                    	jmp	print_loop
   332                                    
   333                                  
   334                                  print_out:			;printing newline
   335 000002FB FE0D[68000000]          	dec	byte [INDEX]
   336 00000301 68[50000000]            	push	NEWLINE
   337 00000306 E8(00000000)            	call	printf
   338 0000030B 83C404                  	add	esp,4
   339 0000030E E9FFFCFFFF              	jmp 	calc	
   340                                  
   341                                  make_list:			;making list - for storing all digits/letters in operands. ending list node in 'G'
   342 00000313 55                      	  push	ebp
   343 00000314 89E5                    	  mov	ebp, esp	
   344 00000316 60                      	  pusha
   345                                  
   346 00000317 BF00000000              	  mov	edi,0
   347 0000031C B800000000              	  mov	eax,0
   348 00000321 BB00000000              	  mov	ebx,0
   349 00000326 BA00000000              	  mov	edx,0
   350                                  	  
   351 0000032B 8B7D08                  	  mov	edi,[ebp+8]
   352 0000032E 8B5D0C                  	  mov	ebx,[ebp+12]
   353 00000331 8B7510                  	  mov	esi,[ebp+16]
   354                                  	  
   355 00000334 83FE01                  	  cmp	esi, 1
   356 00000337 7409                    	  je	loop1
   357                                  
   358 00000339 803D[6C000000]01        	  cmp	byte [INPUTMODE],1
   359 00000340 745D                    	  je	loop_octal
   360                                  
   361                                  
   362                                  loop1:			;hex loop
   363 00000342 BA00000000              	  mov	edx,0
   364 00000347 8A13                    	  mov	dl,[ebx]
   365                                  
   366 00000349 80FA30                  	  cmp	byte dl,'0'	
   367 0000034C 7402                    	  je    char_zero
   368 0000034E EB03                    	  jmp loop
   369                                  	  
   370                                  char_zero:
   371                                  
   372 00000350 43                      	  inc ebx
   373 00000351 EBEF                    	  jmp loop1
   374                                  
   375                                  loop:
   376 00000353 53                      	  push 	ebx
   377 00000354 6A05                    	  push 	dword 5
   378 00000356 E8(00000000)            	  call  malloc
   379 0000035B 83C404                  	  add	esp,4
   380 0000035E 5B                      	  pop 	ebx
   381                                  
   382 0000035F BA00000000              	  mov	edx,0
   383 00000364 8A13                    	  mov	dl,[ebx]
   384                                  
   385 00000366 80FA47                  	  cmp	byte dl,'G'	
   386 00000369 7425                    	  je	out
   387                                  	  
   388 0000036B 83FE01                  	  cmp	esi,1
   389 0000036E 740D                    	  je	after_repair
   390                                  
   391 00000370 80FA00                  	  cmp	byte dl,0	
   392 00000373 741B                    	  je	out
   393                                  
   394 00000375 80FA39                  	  cmp	dl,'9'
   395 00000378 7E64                    	  jle	num_repair
   396 0000037A 80EA37                  	  sub	dl,CHAR_REPAIR
   397                                  
   398                                  after_repair:
   399 0000037D 8810                    	  mov	[eax],dl	;assigning data to heap
   400 0000037F 8907                    	  mov	[edi],eax	;set pointer of node in stack
   401                                  
   402 00000381 40                      	  inc	eax
   403 00000382 43                      	  inc	ebx
   404 00000383 89C7                    	  mov	edi,eax
   405                                  
   406 00000385 803D[6C000000]01        	  cmp	byte [INPUTMODE],1
   407 0000038C 7411                    	  je	loop_octal
   408                                  	  
   409 0000038E EBB2                    	  jmp	loop1
   410                                  
   411                                  out:    
   412 00000390 B247                    	  mov	dl,'G'
   413 00000392 8810                    	  mov	[eax],dl
   414 00000394 8907                    	  mov	[edi],eax
   415                                  	  
   416 00000396 40                      	  inc	eax
   417 00000397 43                      	  inc	ebx
   418 00000398 89C7                    	  mov	edi,eax
   419                                  
   420 0000039A 61                      	  popa
   421 0000039B 89EC                    	  mov	esp, ebp	
   422 0000039D 5D                      	  pop	ebp
   423 0000039E C3                      	  ret
   424                                  
   425                                  loop_octal:  		;loop for octal
   426 0000039F 53                      	  push 	ebx              
   427 000003A0 6A05                    	  push 	dword 5
   428 000003A2 E8(00000000)            	  call  malloc
   429 000003A7 83C404                  	  add	esp,4
   430 000003AA 5B                      	  pop 	ebx
   431                                  
   432 000003AB BA00000000              	  mov	edx,0
   433 000003B0 8A13                    	  mov 	dl,  [ebx]
   434                                  	  
   435 000003B2 80FA47                  	  cmp	byte dl,'G'	
   436 000003B5 74D9                    	  je	out
   437                                  	  
   438 000003B7 83FE01                  	  cmp	esi,1
   439 000003BA 74C1                    	  je	after_repair
   440                                  
   441 000003BC 80FA00                  	  cmp	byte dl,0	
   442 000003BF 74CF                    	  je	out
   443                                  
   444 000003C1 80FA37                  	  cmp	dl,'7'
   445 000003C4 7E18                    	  jle	num_repair
   446                                  	  
   447                                  	  
   448                                  octal:
   449 000003C6 C605[6C000000]01        	  mov	byte [INPUTMODE],1
   450 000003CD E940FCFFFF              	  jmp	calc
   451                                  
   452                                  
   453                                  hexadecimal:
   454 000003D2 C605[6C000000]00        	  mov	byte [INPUTMODE],0
   455 000003D9 E934FCFFFF              	  jmp	calc
   456                                  	  
   457                                  
   458                                  num_repair:			;reparing number from assci to decimal
   459 000003DE 80FA30                  	  cmp	dl,'0'
   460 000003E1 7D02                    	  jge	legal_num
   461 000003E3 EB98                    	  jmp	after_repair
   462                                  
   463                                  
   464                                  legal_num:	  
   465 000003E5 80EA30                  	  sub	dl,NUM_REPAIR
   466 000003E8 EB93                    	  jmp	after_repair
   467                                  
   468                                  	  
   469                                  xor:				;xor between to operands
   470 000003EA C705[62010000]0000-     	  mov	dword [OPI1],0
   471 000003F2 0000               
   472 000003F4 C705[66010000]0000-     	  mov	dword [OPI2],0
   473 000003FC 0000               
   474 000003FE 803D[68000000]02                  cmp	byte [INDEX],2
   475 00000405 0F8E9EFCFFFF            	  jle	error_argu
   476 0000040B 8B35[68000000]          	  mov	esi,[INDEX]
   477 00000411 4E                      	  dec	esi
   478 00000412 8B3CB5[50000000]        	  mov	edi,[STACK+4*esi]
   479 00000419 B800000000              	  mov	eax,0
   480                                  
   481                                  op1_loop_xor:			;going through the first list and add the numbers to one array OPERAND1
   482 0000041E BA00000000              	  mov   edx,0			
   483 00000423 8A17                    	  mov	dl,[edi]		
   484 00000425 8890[70000000]          	  mov	[OPERAND1+eax],dl	
   485 0000042B 47                      	  inc	edi
   486 0000042C 40                      	  inc	eax
   487 0000042D 8B3F                    	  mov	edi,[edi]
   488 0000042F 80FA47                  	  cmp	dl,'G'
   489 00000432 75EA                    	  jne	op1_loop_xor
   490                                  	  
   491 00000434 48                      	  dec	eax
   492 00000435 A3[62010000]            	  mov	[OPI1],eax	;displacement of operand1 to 'G'
   493 0000043A 4E                      	  dec	esi
   494 0000043B 8B3CB5[50000000]        	  mov	edi,[STACK+4*esi]
   495 00000442 B800000000              	  mov	eax,0
   496 00000447 FE0D[68000000]          	  dec	byte [INDEX]	;"remove" old number from stack
   497                                  
   498                                  op2_loop_xor:			;going through the second list and add the numbers to one array OPERAND2
   499 0000044D BA00000000              	  mov   edx,0
   500 00000452 8A17                    	  mov	dl,[edi]  
   501 00000454 8890[C0000000]          	  mov	[OPERAND2+eax],dl
   502 0000045A 47                      	  inc	edi
   503 0000045B 40                      	  inc	eax
   504 0000045C 8B3F                    	  mov	edi,[edi]
   505 0000045E 80FA47                  	  cmp	dl,'G'
   506 00000461 75EA                    	  jne	op2_loop_xor   
   507                                  	  
   508 00000463 48                      	  dec	eax
   509 00000464 A3[66010000]            	  mov	[OPI2],eax	;displacement of operand2 to 'G'
   510 00000469 FE0D[68000000]          	  dec	byte [INDEX]	;"remove" old number from stack
   511                                  	  
   512 0000046F A3[6A010000]            	  mov	[ANI],eax	; comparing the two sizes of OPI1 vs OPI2, and let the bigger be the size of answer
   513 00000474 3B05[62010000]          	  cmp	eax,[OPI1]
   514 0000047A 7D0A                    	  jge	build_ans_xor
   515 0000047C A1[62010000]            	  mov	eax,[OPI1]
   516 00000481 A3[6A010000]            	  mov	[ANI],eax
   517                                  
   518                                  build_ans_xor:
   519 00000486 8B35[6A010000]          	  mov	esi,[ANI]
   520 0000048C C686[10010000]47        	  mov	byte [ANSWER+esi],'G'
   521 00000493 B900000000              	  mov	ecx,0
   522                                  	  
   523                                  xor_loop:
   524 00000498 B800000000              	    mov	 eax,0 
   525 0000049D BB00000000              	    mov	 ebx,0 
   526 000004A2 FF0D[6A010000]          	    dec  dword [ANI]
   527 000004A8 FF0D[62010000]          	    dec	 dword [OPI1]
   528 000004AE FF0D[66010000]          	    dec	 dword [OPI2]
   529 000004B4 833D[6A010000]00        	    cmp  dword [ANI],0
   530 000004BB 7C32                    	    jl	 xor_out
   531                                  	    
   532 000004BD 8B35[62010000]          	    mov	 esi,[OPI1]
   533 000004C3 83FE00                  	    cmp	 esi,0
   534 000004C6 7C06                    	    jl	 xor_opi1_empty		
   535                                  	    
   536 000004C8 8A86[70000000]          	    mov  al,[OPERAND1+esi]	;OPPERAND1 is not empty yet
   537                                  
   538                                  xor_opi1_empty:
   539 000004CE 8B35[66010000]          	    mov	 esi,[OPI2]
   540 000004D4 83FE00                  	    cmp	 esi,0
   541 000004D7 7C06                    	    jl	 xor_opi2_empty
   542                                  	    
   543 000004D9 8A9E[C0000000]          	    mov  bl,[OPERAND2+esi]	;OPPERAND1 is not empty yet
   544                                  
   545                                  xor_opi2_empty:			
   546 000004DF 31D8                    	    xor  eax,ebx
   547                                  	    
   548 000004E1 8B35[6A010000]          	    mov	esi,[ANI]
   549 000004E7 8886[10010000]          	    mov	[ANSWER+esi],al
   550 000004ED EBA9                    	    jmp xor_loop
   551                                  	
   552                                  xor_out:				;creating a new link list with answer
   553 000004EF BF00000000              	mov	edi,0
   554 000004F4 BE00000000              	mov	esi,0
   555 000004F9 8B35[68000000]          	mov	esi,[INDEX]
   556 000004FF 6BF604                  	imul	esi,4
   557 00000502 BF[50000000]                    mov	edi,STACK
   558 00000507 01F7                            add	edi,esi
   559 00000509 6A01                    	push	dword 1    
   560 0000050B 68[10010000]            	push	ANSWER
   561 00000510 57                      	push	edi
   562 00000511 E8FDFDFFFF              	call	make_list
   563 00000516 83C40C                  	add 	esp,12
   564 00000519 FE05[68000000]          	inc	byte [INDEX]
   565 0000051F E9EEFAFFFF              	jmp	calc
   566                                  	
   567                                  exponent:
   568 00000524 BE00000000              	  mov	esi,0
   569 00000529 8B35[68000000]          	  mov	esi,[INDEX]
   570                                  	  
   571 0000052F 83FE01                  	  cmp	esi,1		;checking that there's at least one number in stack
   572 00000532 0F8E71FBFFFF            	  jle	error_argu
   573                                  
   574 00000538 4E                      	  dec	esi
   575 00000539 8B3CB5[50000000]        	  mov	edi,[STACK+4*esi]
   576                                  	  
   577 00000540 B800000000              	  mov 	eax,0		; counter for link value
   578                                  	  
   579                                  count_digits_loop:
   580 00000545 BA00000000              	  mov   edx,0
   581 0000054A 8A17                    	  mov	dl,[edi]
   582 0000054C 80FA47                  	  cmp	dl,'G'
   583 0000054F 7502                    	  jne	add_count
   584 00000551 EB06                    	  jmp	calc_value
   585                                  	  
   586                                  add_count:
   587 00000553 40                      	  inc	eax
   588 00000554 47                      	  inc	edi
   589 00000555 8B3F                    	  mov	edi,[edi]
   590 00000557 EBEC                    	  jmp	count_digits_loop
   591                                  	  
   592                                  calc_value:
   593 00000559 BF00000000              	  mov	edi,0
   594 0000055E 8B3CB5[50000000]        	  mov	edi,[STACK+4*esi]
   595                                  
   596 00000565 48                      	  dec	eax
   597                                  	  
   598                                  calc_loop:
   599 00000566 B900000000              	  mov	ecx,0
   600 0000056B BA00000000              	  mov   edx,0
   601 00000570 8A17                    	  mov	dl,[edi]
   602                                  	  
   603 00000572 83F800                  	  cmp	eax,0
   604 00000575 7C4C                    	  jl	calc_exponent
   605                                  	  
   606 00000577 803D[6C000000]01        	  cmp	byte [INPUTMODE],1
   607 0000057E 7419                    	  je	calc_loop_octal
   608                                  	  
   609 00000580 BB01000000              	  mov	ebx,1
   610 00000585 6BC804                  	  imul	ecx,eax,4
   611                                  	  
   612 00000588 D3E3                    	  shl	ebx,cl			;ebx = the 16^count
   613                                  	  
   614 0000058A 0FAFDA                  	  imul	ebx,edx			;get the true number in decimal
   615                                  	  
   616 0000058D 011D[6E010000]          	  add	[EXPONENT],ebx
   617                                  	  
   618 00000593 48                      	  dec	eax
   619 00000594 47                      	  inc	edi
   620 00000595 8B3F                    	  mov	edi,[edi]
   621 00000597 EBCD                    	  jmp	calc_loop
   622                                  	  
   623                                  calc_loop_octal:
   624                                  	  
   625 00000599 B900000000              	  mov	ecx,0
   626 0000059E BA00000000              	  mov   edx,0
   627 000005A3 8A17                    	  mov	dl,[edi]
   628                                  	  
   629 000005A5 83F800                  	  cmp	eax,0
   630 000005A8 7C19                    	  jl	calc_exponent
   631                                  	  
   632 000005AA BB01000000              	  mov	ebx,1
   633 000005AF 6BC803                  	  imul	ecx,eax,3
   634                                  	  
   635 000005B2 D3E3                    	  shl	ebx,cl			;ebx = the 8^count
   636                                  	  
   637 000005B4 0FAFDA                  	  imul	ebx,edx			;get the true number in decimal
   638                                  	  
   639 000005B7 011D[6E010000]          	  add	[EXPONENT],ebx
   640                                  	  
   641 000005BD 48                      	  dec	eax
   642 000005BE 47                      	  inc	edi
   643 000005BF 8B3F                    	  mov	edi,[edi]
   644 000005C1 EBD6                    	  jmp	calc_loop_octal
   645                                  	  
   646                                  calc_exponent:
   647 000005C3 BB01000000              	  mov	ebx,1
   648 000005C8 B900000000              	  mov	ecx,0
   649 000005CD 8B0D[6E010000]          	  mov	ecx,[EXPONENT]
   650 000005D3 D3E3                    	  shl	ebx,cl				; calculationg the 2^exponent
   651                                  
   652 000005D5 C605[9E010000]47        	  mov	byte[EXP_ANSWER+16],'G'		;put in the end of exponent answer 'G'
   653 000005DC 891D[8E010000]          	  mov 	[EXP_ANSWER],ebx		;copying the answer into array
   654                                  	    
   655                                  build_exp_ans:
   656 000005E2 BF00000000              	  mov	edi,0
   657 000005E7 BE00000000              	  mov	esi,0
   658 000005EC 8B35[68000000]          	  mov	esi,[INDEX]
   659 000005F2 6BF604                  	  imul	esi,4
   660 000005F5 BF[50000000]            	  mov	edi,STACK
   661 000005FA 01F7                    	  add	edi,esi
   662 000005FC 6A01                    	  push	dword 1
   663 000005FE 68[8E010000]            	  push	EXP_ANSWER
   664 00000603 57                      	  push	edi
   665 00000604 E80AFDFFFF              	  call	make_list
   666 00000609 83C40C                  	  add 	esp,12
   667 0000060C FE05[68000000]          	  inc	byte [INDEX]
   668                                  	  
   669 00000612 C705[6E010000]0000-     	  mov   dword[EXPONENT],0    ;reset exponent
   670 0000061A 0000               
   671 0000061C C705[8E010000]0000-     	  mov   dword[EXP_ANSWER],0  ;reset answer
   672 00000624 0000               
   673                                  	  
   674 00000626 E9E7F9FFFF              	  jmp	calc
   675                                  	  	  
   676                                  mul_octal:
   677 0000062B 6BC802                  	  imul	ecx,eax,2
   678 0000062E D3E2                    	  shl	edx,cl
   679 00000630 010D[6E010000]          	  add	[EXPONENT],ecx
   680                                  	  
   681                                  free_stack:			;going through all elements in stack and deallocating all memory
   682 00000636 BE00000000              	  mov	esi,0
   683 0000063B 8B35[68000000]          	  mov	esi,[INDEX]
   684                                  
   685 00000641 83FE01                  	  cmp	esi,1		;checking that there's at least one number in stack
   686 00000644 0F8E43FAFFFF            	  jle	continue
   687                                  
   688 0000064A 4E                      	  dec	esi
   689 0000064B 8B3CB5[50000000]        	  mov	edi,[STACK+4*esi]
   690                                    
   691                                  free_single_list:
   692 00000652 BB00000000              	  mov   ebx,0
   693 00000657 89FB                    	  mov	ebx,edi	
   694 00000659 43                      	  inc 	ebx
   695 0000065A 8B1B                    	  mov   ebx,[ebx]	;getting the next node address 
   696                                  	
   697 0000065C 60                      	  pusha			;saving all registers 
   698                                  	  
   699 0000065D 57                      	  push	edi		;free memory of node
   700 0000065E E8(00000000)            	  call	free
   701 00000663 83C404                  	  add	esp,4
   702                                  	  
   703 00000666 61                      	  popa			;restoring all registers
   704                                  	  
   705 00000667 BF00000000              	  mov 	edi,0
   706 0000066C 89DF                    	  mov	edi, ebx
   707 0000066E 8A17                     	  mov	dl,[edi] 	;getting first number in node
   708                                  	  
   709 00000670 80FA47                  	  cmp	dl,'G'		;checking if we are at end of linked list
   710 00000673 75DD                    	  jne	free_single_list
   711                                  	  
   712 00000675 60                      	  pusha			;free last node
   713 00000676 E8(00000000)            	  call	free
   714 0000067B 61                      	  popa
   715                                  	  
   716 0000067C FE0D[68000000]          	  dec	byte [INDEX]
   717                                  	  
   718 00000682 EBB2                    	  jmp free_stack
